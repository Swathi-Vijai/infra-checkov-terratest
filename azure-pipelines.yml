# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr:
  - main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: checkov
    jobs:
        - job: compliance
          displayName: 'Run checkov for compliance'
          steps:
           # task to install checkov 
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  
                  pip3 install -U checkov
            
            - task: Bash@3
              displayName: 'Checkov Static Code Analysis'
              inputs:
                targetType: 'inline'
                script: 'checkov --directory  ./Terraform  --file  $(System.DefaultWorkingDirectory)/azure-pipelines-1.yml --file $(System.DefaultWorkingDirectory)/azure-pipelines.yml --skip-check MEDIUM --external-checks-dir cp -o cli -o junitxml -o  json --output-file-path console,$(System.DefaultWorkingDirectory)/Checkov-report_xml.xml,$(System.DefaultWorkingDirectory)/Checkov-report_json.json'
              continueOnError: true

            - task: PublishTestResults@2
              displayName: 'Publish checkov Test Results'
              condition: succeededOrFailed()
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: 'Checkov-report_xml.xml'
                 
            # optional task Needed only to understand the file structure of checkov report
            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: $(System.DefaultWorkingDirectory)/Checkov-report_json.json
                artifactName: Checkov-Report
            
            - task: PythonScript@0
              inputs:
                scriptSource: 'inline'
                script: |
                  def get_severity_value(url,check_id):
                      if url == None and check_id.startswith("CP"):
                          return("Custom Policy")
                      elif url == None:
                          return("LOW*")
                      else:
                          import requests
                          from bs4 import BeautifulSoup

                          # Making a GET request
                          r = requests.get(url)
                          soup = BeautifulSoup(r.content, 'html.parser')

                          s = soup.find('div', class_='excerpt')
                          if s == None:
                              return("LOW")
                          else:
                              lines = s.find_all('p')
                              st=''
                              for line in lines:
                                  st=st+(line.text)
                              l=st.split('\n')
                              for x in l:
                                  if 'Severity' in x:
                                      return(x[10:1000])

                  
                  import json
                  reading_file='Checkov-report_json.json'
                  # this is where we store the data for email (writing file)
                  writing_file='summary.json'
                  with open(writing_file, 'w') as report_file:
                      print("The empty json file is created")
                      line = "-"*125
                      divider = ' | '.join(["-"*18 for _ in range(6)])
                      line_indicator = '%0D%0A'
                      block_indicator = """```"""
                      with open(reading_file) as f:
                          data = json.load(f)
                          res = line + line_indicator
                  
                          if type(data) == list:
                              for i in range(len(data)):
                                  res = res + str('Check Type:     ' +
                                                  data[i]["check_type"]).center(120)
                  
                                  xdata = data[i]["summary"]
                  
                                  res = res + line_indicator + line + line_indicator + ' | '.join(xdata.keys()
                                                                                                  ) + line_indicator + divider + line_indicator + ' | '.join(map(str, xdata.values())) + line_indicator + line
                                  # this report file is use to send email for particular users
                                  report_file.write(str('Check Type:     ' +
                                                  data[i]["check_type"]))
                                  report_file.write('\n')
                                  report_file.write(json.dumps(xdata))
                                  report_file.write('\n')
                                  #################################################
                                  
                  
                                  check_results = data[i]["results"]
                  
                                  # The next block of code is to use to get the severity levl of each error
                                  # Use flag and set FlagFailedSeverity as an variable
                                  Failed_Severity = []
                                  Restricted_Severity = ["HIGH", "CRITICAL"] # required to modify based on requirement
                                  #["HIGH", "CRITICAL", "MEDIUM", "LOW"]
                                  failed_check = (check_results["failed_checks"])
                                  for j in range(len((check_results["failed_checks"]))):
                                    Failed_Severity.append(str(get_severity_value(failed_check[j]["guideline"], failed_check[j]["check_id"])))
                                  flag = 0
                                  for _ in Failed_Severity:
                                    if _ in Restricted_Severity:
                                      flag = 1
                                      break
                                  print(
                                      f"##vso[task.setvariable variable=FlagFailedSeverity;]{flag}")
                                  
                  
                                  
                                  # Rest of the code is for getting the require data for Github pull request and store it in res
                                  # And set GhComment as variable and assign the value as res
                                  for _ in check_results:
                                      name = " ".join(map(lambda z: z.capitalize(), _.split('_')))
                                      res = res + line_indicator + block_indicator
                  
                                      res = res + line_indicator + name + ':'
                                      if _ != "parsing_errors":
                  
                                          for j in range(len(check_results[_])):
                  
                                              res = res + line_indicator + \
                                                  str(get_severity_value(check_results[_][j]["guideline"], check_results[_][j]["check_id"])) + \
                                                  " : " + (check_results[_][j]["check_name"]) + " - Resource Name : " + (check_results[_][j]["resource"])
                                              # print("=============")
                                              # print(check_results[_][j]["severity"])
                                              # print("==========================")
                                          res = res + line_indicator
                                          
                                      else:
                                          for j in range(len(check_results[_])):
                  
                                              res = res + line_indicator + (check_results[_][j])
                                          res = res + line_indicator
                                      res = res + line_indicator + block_indicator + \
                                          line_indicator + line + line_indicator
                              print(res)
                          else:
                              res = res + str('Check Type:     ' + data["check_type"]).center(120)
                              xdata = data["summary"]
                              res = res + line_indicator + line + line_indicator + ' | '.join(xdata.keys()
                                                                                              ) + line_indicator + divider + line_indicator + ' | '.join(map(str, xdata.values())) + line_indicator + line
                              report_file.write(json.dumps(xdata))
                              
                      print(f"##vso[task.setvariable variable=GhComment;]{res}")

            

            - task: SendGridEmail@2
              inputs:
                SendGridApiKey: '$(MAIL-API)'
                FromAddress: 'sai.chodapaneedi@tigeranalytics.com'
                ToAddresses: 'sai.chodapaneedi@tigeranalytics.com, nvswathi2000@gmail.com,'
                Subject: 'Checkov_Report of PullRequest - $(System.PullRequest.PullRequestNumber)'
                emailBodyFormat: 'File'
                EmailBodyFile: 'summary.json'
            - task: GitHubComment@0
              inputs:
                gitHubConnection: 'github.com_checkov' # modify based on client
                repositoryName: '$(Build.Repository.Name)'
                id: '$(System.PullRequest.PullRequestNumber)'
                comment: '$(GhComment)'
            

            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  if [ $(FlagFailedSeverity) -eq 1 ]
                  then
                  exit 1
                  fi
                failOnStderr: true


  # - stage: Terratest
  #   dependsOn: checkov
  #   jobs:
  #       - job: 
  #         displayName: Terratest
          
          
  #         steps:
  #           - task: GoTool@0
  #             inputs:
  #               version: '1.19.4'

  #           - task: CmdLine@2
  #             inputs:
  #               script: |
  #                 export MY_VARIABLE="my value"
  #                 export ARM_CLIENT_ID="$(ARM_CLIENT_ID)"
  #                 export ARM_CLIENT_SECRET="$(ARM_CLIENT_SECRET)"
  #                 export ARM_SUBSCRIPTION_ID="$(ARM_SUBSCRIPTION_ID)"
  #                 export ARM_TENANT_ID="$(ARM_TENANT_ID)"
  #                 echo "Environment Variables exported"
  #                 echo "sub id"
  #                 echo $ARM_SUBSCRIPTION_ID
  #                 echo "tenant id"
  #                 echo $ARM_TENANT_ID
  #                 echo "client secret"
  #                 echo $ARM_CLIENT_SECRET
  #                 echo "client id"
  #                 echo $ARM_CLIENT_ID
  #                 echo "my variable"
  #                 echo $MY_VARIABLE
  #             displayName: 'Env variables setup'

  #           - task: CmdLine@2
  #             inputs:
  #               script: |
  #                 az login -u "$(username)" -p "$(password)" 
  #                 cd test
  #                 go mod init test
  #                 go mod tidy
  #                 go test -v
                  
  #             displayName: 'go test'
            
  - stage: cost_estimation
    #dependsOn: Terratest
    jobs:
        - job: 
          displayName: 'infracost'
          

          steps:
            - task: InfracostSetup@1
              inputs:
                apiKey: $(api_key)
                version: '0.10.x'

            - bash: |
                branch=$(System.PullRequest.TargetBranch)
                git clone https://github.com/Swathi-Vijai/infra-checkov-terratest.git --branch=${branch} --single-branch /tmp/base
              displayName: Checkout base branch
              
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  cd /tmp/base
                  ls
              
            - bash: |
                infracost breakdown --path=/tmp/base/Terraform \
                                      --format=json \
                                      --out-file=/tmp/infracost-base.json 
              displayName: Generate Infracost cost estimate baseline
            
            - bash: |
                infracost diff --path=$(TF_ROOT) \
                         --format=json \
                         --compare-to=/tmp/infracost-base.json \
                         --out-file=/tmp/infracost.json
              displayName: Generate Infracost diff
            
            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: /tmp/infracost-base.json
                artifactName: infracost-report

            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: /tmp/infracost.json
                artifactName: infracost-report

            
            - bash: |
                infracost comment github --path=/tmp/infracost.json \
                                  --repo=$(Build.Repository.Name) \
                                  --pull-request=$(System.PullRequest.PullRequestNumber) \
                                  --github-token=$(GITHUB-TOKEN) \
                                  --behavior=update
              displayName: Post Infracost comment

  
  
