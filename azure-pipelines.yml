# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr:
  - main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: checkov
    jobs:
        - job: compliance
          displayName: 'Run checkov for compliance'
          steps:
           # task to install checkov 
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  
                  pip3 install -U checkov
            
            - task: Bash@3
              displayName: 'Checkov Static Code Analysis'
              inputs:
                targetType: 'inline'
                script: 'checkov --directory  ./Terraform  --file  $(System.DefaultWorkingDirectory)/azure-pipelines-1.yml --file $(System.DefaultWorkingDirectory)/azure-pipelines.yml --skip-check MEDIUM --external-checks-dir cp -o cli -o junitxml -o  json --output-file-path console,$(System.DefaultWorkingDirectory)/Checkov-report_xml.xml,$(System.DefaultWorkingDirectory)/Checkov-report_json.json'
              continueOnError: true

            - task: PublishTestResults@2
              displayName: 'Publish checkov Test Results'
              condition: succeededOrFailed()
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: 'Checkov-report_xml.xml'
                 
            # optional task Needed only to understand the file structure of checkov report
            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: $(System.DefaultWorkingDirectory)/Checkov-report_json.json
                artifactName: Checkov-Report
            
            
            - task: PythonScript@0
              inputs:
                scriptSource: 'filePath'
                scriptPath: '$(System.DefaultWorkingDirectory)/checkov.py'
                              
                           
            

            - task: SendGridEmail@2
              inputs:
                SendGridApiKey: '$(MAIL-API)'
                FromAddress: 'sai.chodapaneedi@tigeranalytics.com'
                ToAddresses: 'sai.chodapaneedi@tigeranalytics.com, nvswathi2000@gmail.com,'
                Subject: 'Checkov_Report of PullRequest - $(System.PullRequest.PullRequestNumber)'
                emailBodyFormat: 'File'
                EmailBodyFile: 'summary.json'
            - task: GitHubComment@0
              inputs:
                gitHubConnection: 'github.com_checkov' # modify based on client
                repositoryName: '$(Build.Repository.Name)'
                id: '$(System.PullRequest.PullRequestNumber)'
                comment: '$(GhComment)'
            

            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  if [ $(FlagFailedSeverity) -eq 1 ]
                  then
                  exit 1
                  fi
                failOnStderr: true


  # - stage: Terratest
  #   dependsOn: checkov
  #   jobs:
  #       - job: 
  #         displayName: Terratest
          
          
  #         steps:
  #           - task: GoTool@0
  #             inputs:
  #               version: '1.19.4'

  #           - task: CmdLine@2
  #             inputs:
  #               script: |
  #                 export MY_VARIABLE="my value"
  #                 export ARM_CLIENT_ID="$(ARM_CLIENT_ID)"
  #                 export ARM_CLIENT_SECRET="$(ARM_CLIENT_SECRET)"
  #                 export ARM_SUBSCRIPTION_ID="$(ARM_SUBSCRIPTION_ID)"
  #                 export ARM_TENANT_ID="$(ARM_TENANT_ID)"
  #                 echo "Environment Variables exported"
  #                 echo "sub id"
  #                 echo $ARM_SUBSCRIPTION_ID
  #                 echo "tenant id"
  #                 echo $ARM_TENANT_ID
  #                 echo "client secret"
  #                 echo $ARM_CLIENT_SECRET
  #                 echo "client id"
  #                 echo $ARM_CLIENT_ID
  #                 echo "my variable"
  #                 echo $MY_VARIABLE
  #             displayName: 'Env variables setup'

  #           - task: CmdLine@2
  #             inputs:
  #               script: |
  #                 az login -u "$(username)" -p "$(password)" 
  #                 cd test
  #                 go mod init test
  #                 go mod tidy
  #                 go test -v
                  
  #             displayName: 'go test'
            
  - stage: cost_estimation
    #dependsOn: Terratest
    jobs:
        - job: 
          displayName: 'infracost'
          

          steps:
            - task: InfracostSetup@1
              inputs:
                apiKey: $(api_key)
                version: '0.10.x'

            - bash: |
                branch=$(System.PullRequest.TargetBranch)
                git clone https://github.com/Swathi-Vijai/infra-checkov-terratest.git --branch=${branch} --single-branch /tmp/base
              displayName: Checkout base branch
              
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  cd /tmp/base
                  ls
              
            - bash: |
                infracost breakdown --path=/tmp/base/Terraform \
                                      --format=json \
                                      --out-file=/tmp/infracost-base.json 
              displayName: Generate Infracost cost estimate baseline
            
            - bash: |
                infracost diff --path=$(TF_ROOT) \
                         --format=json \
                         --compare-to=/tmp/infracost-base.json \
                         --out-file=/tmp/infracost.json
              displayName: Generate Infracost diff
            
            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: /tmp/infracost-base.json
                artifactName: infracost-report



            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: /tmp/infracost.json
                artifactName: infracost-report
            
            # - task: PythonScript@0
            #   inputs:
            #     scriptSource: 'inline'
            #     script: |
            #       import json
            #       def get_discount_value(original_value, Disount_in_percentage):
            #           a=float(original_value) * (Disount_in_percentage / 100.0)
            #           return (float(original_value)-a)
            #       Discount_Azure_prices_in_percentage=5
                  
            #       pullrequest_branch='infracost.json'
                  
            #       with open(pullrequest_branch, 'r+') as PR:
            #           PR_branch_data = json.load(PR)
                  
                  
            #       for i in range(len(PR_branch_data["projects"])):
            #           Actual_Past_Price_pastbreakdown = PR_branch_data["projects"][i]["pastBreakdown"]["totalMonthlyCost"]
            #           new_Actual_Past_Price_pastbreakdown = get_discount_value(Actual_Past_Price_pastbreakdown, Discount_Azure_prices_in_percentage)
            #           PR_branch_data["projects"][i]["pastBreakdown"]["totalMonthlyCost"] = new_Actual_Past_Price_pastbreakdown
                  
            #           Actual_Total_Price_breakdown = PR_branch_data["projects"][i]["breakdown"]["totalMonthlyCost"]
            #           new_Actual_Total_Price_breakdown = get_discount_value(Actual_Total_Price_breakdown, Discount_Azure_prices_in_percentage)
            #           PR_branch_data["projects"][i]["breakdown"]["totalMonthlyCost"] = new_Actual_Total_Price_breakdown
                  
            #           Actual_Total_Price_diff = PR_branch_data["projects"][i]["diff"]["totalMonthlyCost"]
            #           new_Actual_Total_Price_diff = get_discount_value(Actual_Total_Price_diff, Discount_Azure_prices_in_percentage)
            #           PR_branch_data["projects"][i]["diff"]["totalMonthlyCost"] = new_Actual_Total_Price_diff
                  
            #           # Summary
            #           PR_branch_data["pastTotalMonthlyCost"] = new_Actual_Past_Price_pastbreakdown
            #           PR_branch_data["totalMonthlyCost"] = new_Actual_Total_Price_breakdown
            #           PR_branch_data["diffTotalMonthlyCost"] =new_Actual_Total_Price_diff
                  
            #           each_project_diff_resources = PR_branch_data["projects"][i]["diff"]["resources"]
            #           for j in range(len(each_project_diff_resources)):
            #               new_Discount_per_resources = get_discount_value(each_project_diff_resources[j]["monthlyCost"], Discount_Azure_prices_in_percentage)
            #               each_project_diff_resources[j]["monthlyCost"]= new_Discount_per_resources
            #               if "costComponents" in each_project_diff_resources[j]:
            #                   cost_components_per_resources = each_project_diff_resources[j]["costComponents"]
            #                   for k in range(len(cost_components_per_resources)):
            #                       new_cost_component = get_discount_value(cost_components_per_resources[k]["monthlyCost"], Discount_Azure_prices_in_percentage)
            #                       cost_components_per_resources[k]["monthlyCost"] = new_cost_component
            #               if "subresources" in each_project_diff_resources[j]:
            #                   subresources_per_each_resource = each_project_diff_resources[j]["subresources"]
            #                   for l in range(len(subresources_per_each_resource)):
            #                       new_subresource_cost = get_discount_value(subresources_per_each_resource[l]["monthlyCost"], Discount_Azure_prices_in_percentage)
            #                       subresources_per_each_resource[l]["monthlyCost"] = new_subresource_cost
            #                       if "costComponents" in subresources_per_each_resource[l]:
            #                           costComponents_per_subresources = subresources_per_each_resource[l]["costComponents"]
            #                           for m in range(len(costComponents_per_subresources)):
            #                               new_cost_component_per_subresource = get_discount_value(costComponents_per_subresources[m]["monthlyCost"], Discount_Azure_prices_in_percentage)
            #                               costComponents_per_subresources[m]["monthlyCost"] = new_cost_component_per_subresource 
                                  
            #       with open(pullrequest_branch, 'w') as PRr:
            #           json.dump(PR_branch_data, PRr)
            #       PRr.close()
            #     workingDirectory: '/tmp'
            
            - bash: |
                infracost comment github --path=/tmp/infracost.json \
                                  --repo=$(Build.Repository.Name) \
                                  --pull-request=$(System.PullRequest.PullRequestNumber) \
                                  --github-token=$(GITHUB-TOKEN) \
                                  --behavior=update
              displayName: Post Infracost comment

            - task: PythonScript@0
              inputs:
                scriptSource: 'inline'
                script: |
                  import json
                  Project_budget_in_USD = 147
                  
                  Allowed_montly_diff=50
                  
                  pullrequest_branch='infracost.json'
                  
                  with open(pullrequest_branch) as PR:
                      PR_branch_data = json.load(PR)
                  Flag1=0
                  Flag2=0
                  if Allowed_montly_diff==0:
                      if round(float(PR_branch_data["totalMonthlyCost"])) > Project_budget_in_USD:
                          Flag1=1
                  
                  else:
                      if round(float(PR_branch_data["diffTotalMonthlyCost"])) > Allowed_montly_diff:
                          Flag2=1
                  
                  print(f"##vso[task.setvariable variable=FlagProjectBudget;]{Flag1}")
                  print(f"##vso[task.setvariable variable=FlagAllowedMontlyDiff;]{Flag2}")
                  
                workingDirectory: '/tmp'
            
            - task: GitHubComment@0
              condition: eq(variables['FlagProjectBudget'], '1')
              inputs:
                gitHubConnection: 'github.com_checkov'
                repositoryName: '$(Build.Repository.Name)'
                id: '$(System.PullRequest.PullRequestNumber)'
                comment: 'For the current Infra change estimated cost is exceeds the Project Budget'
        
            - task: GitHubComment@0
              condition: eq(variables['FlagAllowedMontlyDiff'], '1')
              inputs:
                gitHubConnection: 'github.com_checkov'
                repositoryName: '$(Build.Repository.Name)'
                id: '$(System.PullRequest.PullRequestNumber)'
                comment: 'For the current Infra change increased by more than the Allowed_monthly_diff'
            - task: Bash@3
              condition: eq(variables['FlagProjectBudget'], '1')
              inputs:
                targetType: 'inline'
                script: |
                  echo "The current PR Price is exceed the Project Budget"
                  exit 1
            
            - task: Bash@3
              condition: eq(variables['FlagAllowedMontlyDiff'], '1')
              inputs:
                targetType: 'inline'
                script: |
                  echo "The current PR Price is increased by more than the Allowed_monthly_diff"
                  exit 1
            # - task: Bash@3
            #   condition: 
            #   inputs:
            #     targetType: 'inline'
            #     script: |
            #       echo $(FlagProjectBudget)
            #       echo $(FlagAllowedMontlyDiff)
            #       if [[ $(FlagProjectBudget) -eq 1 ]]
            #       then
            #       echo "The current PR Price is exceed the Project Budget"
            #       exit 1
            #       elif [[ $(FlagAllowedMontlyDiff) -eq 1 ]]
            #       then
            #       echo "The current PR Price is increased by more than the Allowed_monthly_diff"
            #       exit
            #       fi
            #     failOnStderr: true
            

            

              

  
  
